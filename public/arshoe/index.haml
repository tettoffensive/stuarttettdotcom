!!!
%html{:lang => "en"}
  %head
    %meta{:content => "width=device-width, minimum-scale=1, initial-scale=1, user-scalable=yes", :name => "viewport"}/
    %meta{:content => "Stuart Tett | Product Designer", :name => "description"}/
    / build:css /stylesheets/main.min.css
    %link{:href => "../stylesheets/fonts.css", :rel => "stylesheet", :type => "text/css"}/
    %link{:href => "../stylesheets/style.css", :rel => "stylesheet", :type => "text/css"}/
    %link{:href => "../stylesheets/reset.css", :rel => "stylesheet", :type => "text/css"}/
    / endbuild
    %link{:href => "https://fonts.googleapis.com/css?family=BioRhyme:400,800", :rel => "stylesheet"}/
    %link{:href => "/manifest.json", :rel => "manifest"}/
    %script{:src => "../bower_components/webcomponentsjs/webcomponents-loader.js"}
    %link{:href => "../src/stuarttettdotcom-app/stuarttettdotcom-app.html", :rel => "import"}/
    %title Stuart Tett | Product Designer
    %meta{:content => "text/html; charset=UTF-8", "http-equiv" => "content-type"}/
    %script{:async => "", :src => "https://www.googletagmanager.com/gtag/js?id=UA-42078109-2"}
    :javascript
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments)};
      gtag('js', new Date());

      gtag('config', 'UA-42078109-2');
    :javascript
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
        (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
        m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

      ga('create', 'UA-42078109-2', 'auto');
      ga('set', 'page', '/arshoe');
      ga('send', 'pageview');
  %body{:xmlns => "http://www.w3.org/1999/xhtml"}
    %stuarttettdotcom-app#app{:detail => "arshoe"}
    %section#contentDetails{:style => "display: none; visibility: hidden; min-height: 100vh;"}
      .progress-container.fade-in
        #progress-bar.progress-bar

      / Problem
      .special
      .one-col.col-reset.align-left
        %h1.grid-span.align-left.special
          Problem
        %img.squiggle{:src => "/images/wave.svg"}/
      .one-col.col-reset
        %h3 For consumers, online shoe shopping involves guess work and returns.
        %p Online shopping has become the norm, but for shoes the customer must be convinced to order the shoes before they've worn them and wait for them to ship. This may prevent them from making the purchase.
      %figure.image.contain.fourSeventyTwo{"aria-label" => "ARKicks splash screen mock", :role => "img", :style => "background-image: url(#{"/images/arshoe-splash.jpg"})"}
      .one-col.col3
        %h3 Can we give customers a better glimpse of what wearing the shoes will be like?
        %p With the latest technologies around augmented reality in mobile devices, we might be able to show the user what the shoes will look like on their feet.

      / Interaction
      .special
      .one-col.col-reset.align-left
        %h1.grid-span.align-left.special
          Interaction
        %img.squiggle{:src => "/images/wave.svg"}/
      .one-col.col-reset
        %h3 How might an interface look for trying on virtual shoes?
        %p Automatically recognizing and tracking objects is complicated. So I wondered, if a simple user interface could be designed for the user to tell the camera where the feet are without difficulty.
      %figure.image.contain.fourSeventyTwo{"aria-label" => "Ideation sketches", :role => "img", :style => "background-image: url(#{"/images/arshoe-sketch-all.jpg"})"}
      %figure.image.contain.fourSeventyTwo{"aria-label" => "Sketches for different foot finding options", :role => "img", :style => "background-image: url(#{"/images/arshoe-sketch-feet.jpg"})"}
      .one-col
        %h3 I explored various methods for finding the feet.
        %p  Most of which involved the user tapping or drawing on the screen to tell the app where the feet are.
      .one-col
        %h3 And the idea of using virtual placeholders to “step into” seemed like a more engaging experience.
        %p Since the action is done in the real world and not on the screen, it keeps the user immersed without breaking the illusion.
      %figure.image.contain.fourSeventyTwo{"aria-label" => "Step inside AR shoes flow", :role => "img", :style => "background-image: url(#{"/images/arshoe-step-inside.png"})"}

      / > Explore Interaction
      .special
      %img.squiggle{:src => "/images/wave-dull.svg"}/
      .one-col
        %h3 Initially, I used collection of images to for shoe selection at the bottom.
        %p While a fairly common interface, again it drew attention to the screen and out of the environment.
      %figure.image.contain.fourSeventyTwo{"aria-label" => "Different shoes flow", :role => "img", :style => "background-image: url(#{"/images/arshoe-carousel.png"})"}
      %figure.image.contain.fourSeventyTwo{"aria-label" => "Different shoes flow", :role => "img", :style => "background-image: url(#{"/images/arshoe-shoes.png"})"}
      .one-col
        %h3 Instead, I made the whole screen a paged view to swipe through the shoes.
        %p This way the feet aren't obscured and it's easy to go back and forth between options.
      .one-col
        %h3 For necessary functionality, I found myself adding more buttons to the screen.
        %p I saw the need for buttons for settings, reset, shopping cart, and sharing. As well as shoe options like changing color.
      %figure.image.contain.fourSeventyTwo{"aria-label" => "Two buttons vs. Five buttons", :role => "img", :style => "background-image: url('/images/arshoe-twobuttons.png');"}
      %figure.image.contain.fourSeventyTwo{"aria-label" => "Buttons projected in AR", :role => "img", :style => "background-image: url(#{"/images/arshoe-button-ground.png"})"}
      .one-col
        %h3 What interactions could be moved from the screen into the physical environment?
        %p Back to my theme of keeping the user immersed in the environment, I wanted to find a way to move functionality off of the screen.
        %p This keeps the user's eye on the shoes, and also forces them to move their feet.

      / Purchasing
      .special
      %img.squiggle{:src => "/images/wave-dull.svg"}/
      .one-col
        %h3 I wanted to keep purchasing as close to one-click ordering as possible
        %p The shopping cart has just the shoe model, size, price, and total. More detailed information, editing, and deleting are hidden behind a simple tap.
      %figure.image.contain.fourSeventyTwo{"aria-label" => "Purchasing flow", :role => "img", :style => "background-image: url(#{"/images/arshoe-purchasing.png"})"}
      %figure.image.contain.fourSeventyTwo{"aria-label" => "Settings flow", :role => "img", :style => "background-image: url(#{"/images/arshoe-settings.png"})"}
      .one-col
        %h3 It was important for the user to get to the AR experience as fast as possible.
        %p Required information for payment and shipping is in the settings menu—the first thing the user sees when opening the app in the onboarding experience.
        %p This gives them a quick intro to the app, but they can skip right by and come back when they're ready to purchase.

      / In Store
      .special
      .one-col.col-reset.align-left
        %h1.grid-span.align-left.special
          Observation
        %img.squiggle{:src => "/images/wave.svg"}/
      .one-col.col-reset
        %h3 I visited an athletic shoe store at the mall to observe the customers and sales people.
        %p I noticed how busy it was and very difficult to get the attention of the sales staff to get shoes to try on.
        %p I came to the conclusion that this might be useful for an in-store experience as well.
      %figure.image.contain.fourSeventyTwo{"aria-label" => "Shoe store photo", :role => "img", :style => "background-image: url(#{"/images/arshoe-store.jpg"})"}
      %figure.image.contain.fourSeventyTwo{"aria-label" => "App notification flow", :role => "img", :style => "background-image: url(#{"/images/arshoe-notification.png"})"}
      .one-col
        %h3 I adapted the interface to accomodate for this new use case.
        %p The user can pick their store via location permission if given. Then instead of clicking purchase, they can click “Try On” button. When the shoes are ready, the user will get a push notification.
      .one-col
        %h3 When the customer gets to the store, they're shoes are waiting for them.
        %p The shoes in the store have a temporary label with their name and photo if given.
        %p There's no need to wait, they can grab the shoes and try on the real thing or checkout.
      %figure.image.contain.fourSeventyTwo{"aria-label" => "Shoebox mockup", :role => "img", :style => "background-image: url(#{"/images/arshoe-box.jpg"})"}

      / Learnings
      .special
      .one-col.col-reset.align-left
        %h1.grid-span.align-left.special
          Learnings
        %img.squiggle{:src => "/images/wave.svg"}/
      .grid-span.two-col
        %ul.dark-list
          %li.one Augmented reality is in it's infancy, but it's going to change the way we shop for apparel. But in designing this app, I've learned there are some hurdles to overcome.
      .grid-span.two-col
        %ul.dark-list
          %li.two Finding the ground plane is an unfamiliar action that needs to be taught to users. In addition, being able to see the shoes from different vantage points is an important aspect that I want to explore next.
    %footer#footer.footer.fade-in
      %stt-scroll-btn.btn-bc.z3.invert{:onclick => "TweenLite.to(window, 1, {scrollTo:0});", :style => ""}
    %script{:src => "https://cdnjs.cloudflare.com/ajax/libs/ScrollMagic/2.0.5/ScrollMagic.min.js"}
    %script{:src => "https://cdnjs.cloudflare.com/ajax/libs/gsap/1.20.4/TweenLite.min.js"}
    / build:js /scripts/main.min.js
    %script{:src => "../scripts/animation.gsap.min.js"}
    %script{:src => "../scripts/utils.js"}
    %script{:src => "../scripts/main.js"}
    / endbuild
    %script#detailsScript
      loadCaseAnimation();
